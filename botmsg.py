import unicodedata
import os
import logging
from twilio.rest import Client
from database import (atualizar_status, salvar_conversa, normalizar_para_recebimento,
                      normalizar_para_envio, registrar_estatistica, salvar_novo_visitante,
                      obter_estado_atual_do_banco, obter_nome_do_visitante, obter_dados_visitante,
                      atualizar_dado_visitante)
from enum import Enum
from datetime import datetime
import time
import threading
from collections import deque
import json
import requests
import re
from ia_integracao import IAIntegracao

# Configura√ß√µes Twilio
account_sid = os.getenv('TWILIO_ACCOUNT_SID')
auth_token = os.getenv('TWILIO_AUTH_TOKEN')
twilio_phone_number = os.getenv('TWILIO_PHONE_NUMBER')

# Configura√ß√£o do banco de dados para a IA
db_config_ia = {
    'host': 'localhost',  # Altere para o seu host
    'user': 'seu_usuario',  # Altere para seu usu√°rio
    'password': 'sua_senha',  # Altere para sua senha
    'database': 'seu_banco'   # Altere para seu banco
}

# Inicializa a IA (isso pode levar alguns segundos na primeira execu√ß√£o)
ia_integracao = IAIntegracao(db_config_ia)

# Lista de n√∫meros que receber√£o os pedidos de ora√ß√£o
numero_pedidos_oracao = ['48984949649', '48999449961']

# N√∫mero da secretaria que receber√° os pedidos de "outros"
numero_outros_secretaria = '48991553619'

if not account_sid or not auth_token:
    raise EnvironmentError("Twilio SID e/ou Auth Token n√£o definidos nas vari√°veis de ambiente.")

client = Client(account_sid, auth_token)

# Defini√ß√£o dos links (fora da classe EstadoVisitante)
link_grupo = \
    "https://chat.whatsapp.com/DSG6r3VScxS30hJAnitTkK"
link_discipulado = \
    "https://forms.gle/qdxNnPyCfKoJeseU8"
link_discipulado_novosComec = \
    "https://forms.gle/Cm7d5F9Zv77fgJKDA"
link_grupo_homens_corajosos = "https://chat.whatsapp.com/H4pFqtsruDr0QJ1NvCMjda"
link_grupo_transformadas = "https://chat.whatsapp.com/LT0pN2SPTqf66yt3AWKIAe"


# Enum para os diferentes estados do visitante
class EstadoVisitante(Enum):
    ATUALIZANDO = "ATUALIZANDO"
    INICIO = "INICIO"
    INTERESSE_DISCIPULADO = "INTERESSE_DISCIPULADO"
    INTERESSE_NOVO_COMEC = "INTERESSE_NOVO_COMEC"
    PEDIDO_ORACAO = "PEDIDO_ORACAO"
    HORARIOS = "HORARIOS"
    LINK_WHATSAPP = "LINK_WHATSAPP"
    OUTRO = "OUTRO"
    ATUALIZAR_CADASTRO = "ATUALIZAR_CADASTRO"
    ATUALIZAR_NOME = "ATUALIZAR_NOME"
    ATUALIZAR_EMAIL = "ATUALIZAR_EMAIL"
    ATUALIZAR_DATA_NASCIMENTO = "ATUALIZAR_DATA_NASCIMENTO"
    ATUALIZAR_CIDADE = "ATUALIZAR_CIDADE"
    ATUALIZAR_GENERO = "ATUALIZAR_GENERO"
    ATUALIZAR_ESTADO_CIVIL = "ATUALIZAR_ESTADO_CIVIL"
    ATUALIZAR_OUTRO = "ATUALIZAR_OUTRO"  # Novo estado para outros campos
    FINALIZAR_ATUALIZACAO = "FINALIZAR_ATUALIZACAO"
    AGUARDANDO_ATUALIZACAO = "AGUARDANDO_ATUALIZACAO"
    FIM = "FIM"


transicoes = {
    EstadoVisitante.INICIO: {
        "1": EstadoVisitante.INTERESSE_DISCIPULADO,
        "2": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "3": EstadoVisitante.PEDIDO_ORACAO,
        "4": EstadoVisitante.HORARIOS,
        "5": EstadoVisitante.LINK_WHATSAPP,
        "6": EstadoVisitante.OUTRO,
        "7": EstadoVisitante.ATUALIZAR_CADASTRO,
        "batizado": EstadoVisitante.INTERESSE_DISCIPULADO,
        "novo come√ßo": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "ora√ß√£o": EstadoVisitante.PEDIDO_ORACAO,
        "hor√°rios": EstadoVisitante.HORARIOS,
        "grupo": EstadoVisitante.LINK_WHATSAPP,
        "outro": EstadoVisitante.OUTRO
    },
    EstadoVisitante.INTERESSE_DISCIPULADO: {
        "1": EstadoVisitante.INTERESSE_DISCIPULADO,
        "2": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "3": EstadoVisitante.PEDIDO_ORACAO,
        "4": EstadoVisitante.HORARIOS,
        "5": EstadoVisitante.LINK_WHATSAPP,
        "6": EstadoVisitante.OUTRO,
        "7": EstadoVisitante.ATUALIZAR_CADASTRO,
        "default": EstadoVisitante.INICIO  # Volta ao menu inicial
    },
    EstadoVisitante.INTERESSE_NOVO_COMEC: {
        "1": EstadoVisitante.INTERESSE_DISCIPULADO,
        "2": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "3": EstadoVisitante.PEDIDO_ORACAO,
        "4": EstadoVisitante.HORARIOS,
        "5": EstadoVisitante.LINK_WHATSAPP,
        "6": EstadoVisitante.OUTRO,
        "7": EstadoVisitante.ATUALIZAR_CADASTRO,
        "default": EstadoVisitante.INICIO  # Volta ao menu inicial
    },
    EstadoVisitante.PEDIDO_ORACAO: {
        "1": EstadoVisitante.INTERESSE_DISCIPULADO,
        "2": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "3": EstadoVisitante.PEDIDO_ORACAO,
        "4": EstadoVisitante.HORARIOS,
        "5": EstadoVisitante.LINK_WHATSAPP,
        "6": EstadoVisitante.OUTRO,
        "7": EstadoVisitante.ATUALIZAR_CADASTRO,
        "default": EstadoVisitante.INICIO  # Volta ao menu inicial
    },
    EstadoVisitante.HORARIOS: {
        "1": EstadoVisitante.INTERESSE_DISCIPULADO,
        "2": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "3": EstadoVisitante.PEDIDO_ORACAO,
        "4": EstadoVisitante.HORARIOS,  # Permanece no estado atual
        "5": EstadoVisitante.LINK_WHATSAPP,
        "6": EstadoVisitante.OUTRO,
        "7": EstadoVisitante.ATUALIZAR_CADASTRO,
        "default": EstadoVisitante.INICIO  # Volta ao menu inicial
    },
    EstadoVisitante.OUTRO: {
        "1": EstadoVisitante.INTERESSE_DISCIPULADO,
        "2": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "3": EstadoVisitante.PEDIDO_ORACAO,
        "4": EstadoVisitante.HORARIOS,
        "5": EstadoVisitante.LINK_WHATSAPP,
        "6": EstadoVisitante.OUTRO,
        "7": EstadoVisitante.ATUALIZAR_CADASTRO,
        "default": EstadoVisitante.INICIO  # Volta ao menu inicial
    },
    EstadoVisitante.LINK_WHATSAPP: {
        "1": EstadoVisitante.INTERESSE_DISCIPULADO,
        "2": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "3": EstadoVisitante.PEDIDO_ORACAO,
        "4": EstadoVisitante.HORARIOS,
        "5": EstadoVisitante.LINK_WHATSAPP,
        "6": EstadoVisitante.OUTRO,
        "7": EstadoVisitante.ATUALIZAR_CADASTRO,
        "default": EstadoVisitante.INICIO  # Volta ao menu inicial
    },
    EstadoVisitante.ATUALIZAR_CADASTRO: {
        "1": EstadoVisitante.INTERESSE_DISCIPULADO,
        "2": EstadoVisitante.INTERESSE_NOVO_COMEC,
        "3": EstadoVisitante.PEDIDO_ORACAO,
        "4": EstadoVisitante.HORARIOS,
        "5": EstadoVisitante.LINK_WHATSAPP,
        "6": EstadoVisitante.OUTRO,
        "7": EstadoVisitante.ATUALIZAR_CADASTRO,
        "nome": EstadoVisitante.ATUALIZAR_NOME,
        "email": EstadoVisitante.ATUALIZAR_EMAIL,
        "endere√ßo": EstadoVisitante.ATUALIZAR_CIDADE,
        "g√™nero": EstadoVisitante.ATUALIZAR_GENERO,
        "estado civil": EstadoVisitante.ATUALIZAR_ESTADO_CIVIL,
    },
    EstadoVisitante.ATUALIZAR_GENERO: {
        "masculino": EstadoVisitante.FINALIZAR_ATUALIZACAO,
        "feminino": EstadoVisitante.FINALIZAR_ATUALIZACAO,
        "outro": EstadoVisitante.FINALIZAR_ATUALIZACAO,
    },
    EstadoVisitante.ATUALIZAR_ESTADO_CIVIL: {
        "casado": EstadoVisitante.FINALIZAR_ATUALIZACAO,
        "solteiro": EstadoVisitante.FINALIZAR_ATUALIZACAO,
        "divorciado": EstadoVisitante.FINALIZAR_ATUALIZACAO,
        "vi√∫vo": EstadoVisitante.FINALIZAR_ATUALIZACAO,
    },
    EstadoVisitante.FIM: {
        "default": EstadoVisitante.INICIO  # Qualquer mensagem ap√≥s FIM leva ao INICIO com sauda√ß√£o de retorno
    }
}


# Mensagens associadas aos estados
mensagens = {
    EstadoVisitante.INICIO: "Escolha uma das op√ß√µes:\n"
                            "1‚É£ Sou batizado em √°guas, e quero me tornar membro.\n"
                            "2‚É£ N√£o sou batizado, e quero me tornar membro.\n"
                            "3‚É£ Gostaria de receber ora√ß√µes.\n"
                            "4‚É£ Queria saber mais sobre os hor√°rios dos cultos.\n"
                            "5‚É£ Quero entrar no grupo do WhatsApp da igreja.\n"
                            "6‚É£ Outro assunto.\n"
                            "7‚É£ Atualizar meu cadastro.",
    EstadoVisitante.INTERESSE_DISCIPULADO: f"Que √≥timo! Como voc√™ j√° foi batizado, voc√™ pode participar do nosso "
                                           f"Discipulado de Novos Membros. Aqui est√° o link para se inscrever: "
                                           f"{link_discipulado}. Estamos muito felizes com seu interesse em se tornar "
                                           f"parte da nossa fam√≠lia espiritual!",

    EstadoVisitante.INTERESSE_NOVO_COMEC: f"Ficamos felizes com o seu interesse! Como voc√™ ainda n√£o foi batizado,"
                                          f" recomendamos que participe do nosso Discipulado Novo Come√ßo, "
                                          f"onde voc√™ aprender√° mais sobre a f√© e os pr√≥ximos passos. "
                                          f"Aqui est√° o link para se inscrever: {link_discipulado_novosComec}. "
                                          f"Estamos √† disposi√ß√£o para te ajudar nesse caminho!",

    # Modificar a mensagem de pedido de ora√ß√£o para ser mais humanizada
    EstadoVisitante.PEDIDO_ORACAO: "Ficamos honrados em receber o seu pedido de ora√ß√£o. "
                                   "Sinta-se √† vontade para compartilhar o que est√° em seu cora√ß√£o. "
                                   "Estamos aqui para orar junto com voc√™ e apoiar no que for preciso. üôè",

    EstadoVisitante.HORARIOS: (
        "*Seguem nossos hor√°rios de cultos:*\n\n"
        "üåø *Domingo* - Culto da Fam√≠lia - √†s 19h\n"
        "Uma oportunidade de estar em comunh√£o com sua fam√≠lia, adorando a Deus e agradecendo por cada b√™n√ß√£o. "
        "\"Eu e a minha casa serviremos ao Senhor.\" *(Josu√© 24:15)*\n\n"

        "üî• *Quinta F√©* - Culto dos Milagres - √†s 20h\n"
        "Um encontro de f√© para vivermos o sobrenatural de Deus. "
        "\"Tudo √© poss√≠vel ao que cr√™.\" *(Marcos 9:23)*\n\n"

        "üéâ *S√°bado* - Culto Alive - √†s 20h\n"
        "Jovem, venha viver o melhor s√°bado da sua vida com muita alegria e prop√≥sito! "
        "\"Ningu√©m despreze a tua mocidade, mas s√™ exemplo dos fi√©is.\" *(1 Tim√≥teo 4:12)*\n\n"

        "üôè Somos Uma Igreja Fam√≠lia, Vivendo os Prop√≥sitos de Deus! "
        "\"Pois onde estiverem dois ou tr√™s reunidos em meu nome, ali estou no meio deles.\" *(Mateus 18:20)*\n\n"

        "Gostaria de mais informa√ß√µes?"),

    EstadoVisitante.LINK_WHATSAPP: f"Aqui est√° o link para entrar no nosso grupo do WhatsApp: {link_grupo}\n"
                                   "Agradecemos seu contato e esperamos v√™-lo em breve!",

    EstadoVisitante.OUTRO: "Entendido! üòâ Fique √† vontade para nos contar como podemos te ajudar. "
                           "Estamos aqui para ouvir e apoiar voc√™!",

    EstadoVisitante.FIM: "Muito obrigado pelo seu contato, {visitor_name}! üôè "
                         "Se precisar de mais alguma coisa, estaremos sempre aqui para voc√™. "
                         "Que Deus te aben√ßoe e at√© breve! üëã",

    EstadoVisitante.ATUALIZAR_CADASTRO: "Voc√™ escolheu atualizar seu cadastro. üòä\n\n"
                                        "Antes de prosseguir, gostaria de ver os dados "
                                        "que temos cadastrados para voc√™?\n\n"
                                        "Digite 1 - para **Sim** para ver seus dados ou "
                                        "2 - para **N√£o** para voltar ao menu inicial.",
}


palavras_chave_ministerios = {
    "homens": "Paz de Cristo, somos os Homens Corajosos da Mais de Cristo Canasvieiras, "
              "nossa miss√£o √© servir a Deus com toda for√ßa e cora√ß√£o, nos colocando a frente dos prop√≥sitos de Deus, "
              "para sermos, sacerdotes da nossa casa, homens de coragem e temente a Deus.\n"
              "Venha fazer parte deste ex√©rcito e ficar mais pr√≥ximo do seu prop√≥sito.\n\n"
              "Segue link do grupo de whatsapp: " + link_grupo_homens_corajosos,
    "mulheres": "Paz de Cristo, somos o Minist√©rio Mulheres Transformadas da Mais de Cristo Canasvieiras. "
                "Nosso objetivo √© promover o crescimento espiritual das mulheres, fortalecendo nossa f√© e "
                "nos unindo em amor e comunh√£o. Temos encontros mensais cheios de aprendizado e inspira√ß√£o.\n\n"
                "Venha fazer parte deste grupo e viver os prop√≥sitos que Deus tem para sua vida.\n\n"
                "Segue link do grupo de whatsapp: " + link_grupo_transformadas,
    "jovens": "O Minist√©rio Alive √© dedicado aos jovens e adolescentes, com cultos vibrantes e cheios de prop√≥sito.",
    "criancas": "Venha fazer a diferen√ßa na vida das crian√ßas! "
                "Junte-se ao Minist√©rio Kids e ajude a semear amor e f√© no cora√ß√£o dos pequenos.",
    "kids": "Venha fazer a diferen√ßa na vida das crian√ßas! "
            "Junte-se ao Minist√©rio Kids e ajude a semear amor e f√© no cora√ß√£o dos pequenos.",
    "infantil": "Venha fazer a diferen√ßa na vida das crian√ßas! "
                "Junte-se ao Minist√©rio Kids e ajude a semear amor e f√© no cora√ß√£o dos pequenos.",
    "21 dias": "Ol√°! Ficamos felizes com seu interesse nos 21 dias de ora√ß√£o. üôè "
               "Este evento acontece diariamente, das 23h √†s 23:30, na igreja, e seguir√° at√© o dia 20 de novembro."
               "Ser√° um tempo especial para buscar paz, inspira√ß√£o e fortalecer a f√©. "
               "Caso precise de mais informa√ß√µes ou queira confirmar presen√ßa, estou aqui para ajudar!",
    "pastor": "Nossos pastores atuais s√£o:\n"
              "- *Pr F√°bio Ferreira*\n"
              "- *Pra Cl√°udia Ferreira*\n\n"
              "Voc√™ pode seguir o *_Pr F√°bio Ferreira_* no Instagram: _@prfabioferreirasoficial_\n"
              "E a *_Pra Cl√°udia Ferreira_* no Instagram: _@claudiaferreiras1_",
    "mais amor": "O Minist√©rio Mais Amor √© focado em a√ß√µes sociais, ajudando os necessitados da nossa comunidade.",
    "gc":     "*Grupos de Comunh√£o (GC)* - _Pequenos encontros semanais nos lares para compartilhar hist√≥rias,_"
              " _ora√ß√£o e comunh√£o._ "
              "Participe e viva momentos de f√© e crescimento espiritual!\n\n"
              "*Inscreva-se aqui:* "
              "https://docs.google.com/forms/d/e/1FAIpQLSdj0b3PF-3jwt9Fsw8FvOxv6rSheN7POC1e0bDzub6vEWJm2A/viewform"
}

# Fila de mensagens
fila_mensagens = deque()


# Fun√ß√£o para processar a fila de mensagens
def processar_fila_mensagens():
    while fila_mensagens:
        numero, mensagem = fila_mensagens.popleft()
        try:
            enviar_mensagem(numero, mensagem)
            time.sleep(2)  # Aguarda 2 segundos entre o envio de mensagens
        except Exception as e:
            logging.error(f"Erro ao enviar mensagem para {numero}: {e}")


# Fun√ß√£o para adicionar mensagens √† fila
def adicionar_na_fila(numero, mensagem):
    fila_mensagens.append((numero, mensagem))
    if len(fila_mensagens) == 1:  # Se a fila estava vazia, processa imediatamente
        threading.Thread(target=processar_fila_mensagens).start()


# Fun√ß√£o para capturar apenas o primeiro nome do visitante
def obter_primeiro_nome(nome_completo: str) -> str:
    return nome_completo.split()[0]  # Captura o primeiro nome do visitante


def detectar_palavra_chave_ministerio(texto_recebido: str):
    texto_recebido = normalizar_texto(texto_recebido).replace('√ß', 'c')  # Normaliza o texto e substitui '√ß' por 'c'
    for palavra, resposta in palavras_chave_ministerios.items():
        if palavra in texto_recebido or palavra.rstrip('s') in texto_recebido:  # Verifica singular/plural
            return resposta
    return None


def detectar_saudacao(texto: str) -> bool:
    """
    Verifica se o texto cont√©m uma sauda√ß√£o.
    """
    saudacoes = ["ola", "oi", "bom dia", "boa tarde", "boa noite", "eae", "e a√≠", "sauda√ß√µes",
                 "a paz do senhor", "a paz de cristo", "paz"]
    texto_normalizado = normalizar_texto(texto)

    # Verifica se alguma das sauda√ß√µes est√° presente no texto
    for saudacao in saudacoes:
        if saudacao in texto_normalizado:
            return True
    return False


# Fun√ß√£o para enviar pedidos de ora√ß√£o para todos os n√∫meros da lista
def enviar_pedido_oracao(lista_intercessores, visitor_name, numero_visitante, texto_recebido):
    template_sid = 'HX86a5053a56e35cf157726b22b9c89be6'  # Template SID do pedido de ora√ß√£o
    for numero in lista_intercessores:
        try:
            numero_normalizado_oracao = normalizar_para_envio(numero)
            params = {
                "visitor_name": visitor_name,
                "numero_normalizado": numero_visitante,
                "texto_recebido": texto_recebido,
                "date": datetime.now().strftime('%d/%m/%Y %H:%M')
            }
            enviar_mensagem_manual(numero_normalizado_oracao, template_sid, params)
        except Exception as e:
            logging.error(f"Erro ao enviar o pedido de ora√ß√£o para o n√∫mero {numero}: {e}")


# Substitua a chamada direta para `enviar_mensagem` pelo uso da fila
def enviar_mensagem_para_fila(numero_destino, corpo_mensagem):
    adicionar_na_fila(numero_destino, corpo_mensagem)


# Fun√ß√£o para verificar se a mensagem cont√©m uma express√£o de agradecimento
def detectar_agradecimento(texto):
    palavras_agradecimento = ["obrigado", "obrigada", "grato", "grata",
                              "agradecido", "agradecida", "muito obrigado",
                              "muito obrigada", "amem", "am√©m", "aleluia",
                              "gloria a deus"]
    texto_normalizado = normalizar_texto(texto)  # Usar a fun√ß√£o de normaliza√ß√£o de texto j√° existente
    return any(palavra in texto_normalizado for palavra in palavras_agradecimento)


def processar_mensagem(numero: str, texto_recebido: str, message_sid: str, acao_manual=False) -> dict:
    logging.info(f"Processando mensagem: {numero}, SID: {message_sid}, Mensagem: {texto_recebido}")

    numero_normalizado = normalizar_para_recebimento(numero)
    texto_recebido_normalizado = normalizar_texto(texto_recebido)

    # Buscar estado atual do visitante no banco de dados
    estado_str = obter_estado_atual_do_banco(numero_normalizado)
    logging.debug(f"Estado atual do visitante no Banco: {estado_str}, Mensagem: {texto_recebido}")

    # Estado atual √© validado e fluxo normal continua
    estado_atual = EstadoVisitante[estado_str] if estado_str in EstadoVisitante.__members__ \
        else EstadoVisitante.INICIO
    logging.debug(f"Estado atual: {estado_atual.name}, Texto recebido: {texto_recebido_normalizado}")

    # Se o estado for NULL, ou seja, o visitante n√£o est√° registrado no sistema
    if not estado_str:
        # Verificar se o estado atual √© "PEDIR_NOME" (j√° foi pedido o nome)
        if estado_str == 'PEDIR_NOME':
            # Salvar o nome e registrar o visitante
            salvar_novo_visitante(numero_normalizado, texto_recebido_normalizado)
            resposta = f"Obrigado, {texto_recebido_normalizado}! Agora podemos continuar com o atendimento."
            atualizar_status(numero_normalizado, EstadoVisitante.INICIO.value)
            proximo_estado = EstadoVisitante.INICIO
        else:
            # Pedir o nome do visitante
            resposta = ("Ol√°! Parece que voc√™ ainda n√£o est√° cadastrado no nosso sistema."
                        " Para come√ßar, por favor, me diga o seu nome completo.")
            atualizar_status(numero_normalizado, 'PEDIR_NOME')
            proximo_estado = 'PEDIR_NOME'

        # Enviar a mensagem e salvar a conversa
        enviar_mensagem_para_fila(numero_normalizado, resposta)
        salvar_conversa(numero_normalizado, resposta, tipo='enviada', sid=message_sid)

        return {
            "resposta": resposta,
            "estado_atual": estado_str or "PEDIR_NOME",
            "proximo_estado": proximo_estado
        }

    # Verifica se o texto cont√©m uma palavra-chave de minist√©rio
    resposta_ministerio = detectar_palavra_chave_ministerio(texto_recebido_normalizado)
    if resposta_ministerio:
        enviar_mensagem_para_fila(numero_normalizado, resposta_ministerio)
        salvar_conversa(numero_normalizado, resposta_ministerio, tipo='enviada', sid=message_sid)
        return {
            "resposta": resposta_ministerio,
            "estado_atual": "MINISTERIO",
            "proximo_estado": "INICIO"
        }

    # Verificar se a mensagem √© um agradecimento
    if detectar_agradecimento(texto_recebido_normalizado):
        visitor_name = obter_nome_do_visitante(numero_normalizado).split()[0]
        resposta_agradecimento = (f"Ficamos felizes em poder ajudar, {visitor_name}! "
                                  f"Se precisar de algo mais, estamos √† disposi√ß√£o.")
        enviar_mensagem_para_fila(numero_normalizado, resposta_agradecimento)
        salvar_conversa(numero_normalizado, resposta_agradecimento, tipo='enviada', sid=message_sid)
        return {
            "resposta": resposta_agradecimento,
            "estado_atual": "AGRADACIMENTO",
            "proximo_estado": "INICIO"
        }

    # Verificar se a mensagem √© uma sauda√ß√£o
    if detectar_saudacao(texto_recebido_normalizado):
        visitor_name = obter_nome_do_visitante(numero_normalizado).split()[0]
        resposta_saudacao = (f"Oi! Que bom te ver por aqui,  {visitor_name}üòä. \n\n Como posso ajudar voc√™ hoje?\n\n"
                             "Aqui est√£o algumas op√ß√µes que voc√™ pode escolher:\n\n"
                             "1‚É£ Sou batizado em √°guas, e quero me tornar membro.\n"
                             "2‚É£ N√£o sou batizado, e quero me tornar membro.\n"
                             "3‚É£ Gostaria de receber ora√ß√µes.\n"
                             "4‚É£ Queria saber mais sobre os hor√°rios dos cultos.\n"
                             "5‚É£ Quero entrar no grupo do WhatsApp da igreja.\n"
                             "6‚É£ Outro assunto.\n")
        enviar_mensagem_para_fila(numero_normalizado, resposta_saudacao)
        salvar_conversa(numero_normalizado, resposta_saudacao, tipo='enviada', sid=message_sid)
        
        return {
            "resposta": resposta_saudacao,
            "estado_atual": "SAUDACAO",
            "proximo_estado": estado_str or "INICIO"
        }

    if estado_atual == EstadoVisitante.FIM:
        # Responder com uma sauda√ß√£o de retorno ao visitante
        visitor_name = obter_nome_do_visitante(numero_normalizado).split()[0]  # Pegando s√≥ o primeiro nome
        resposta = (f"Que bom ter voc√™ de volta, {visitor_name}! üòÉ Estamos felizes por poder te ajudar novamente.\n\n"
                    "Aqui est√£o algumas op√ß√µes que voc√™ pode escolher:\n\n"
                    "1‚É£ Sou batizado em √°guas, e quero me tornar membro.\n"
                    "2‚É£ N√£o sou batizado, e quero me tornar membro.\n"
                    "3‚É£ Gostaria de receber ora√ß√µes.\n"
                    "4‚É£ Queria saber mais sobre os hor√°rios dos cultos.\n"
                    "5‚É£ Quero entrar no grupo do WhatsApp da igreja.\n"
                    "6‚É£ Outro assunto.\n")

        # Atualiza o status para INICIO e envia a mensagem
        proximo_estado = EstadoVisitante.INICIO
        atualizar_status(numero_normalizado, proximo_estado.value)
        enviar_mensagem_para_fila(numero_normalizado, resposta)
        salvar_conversa(numero_normalizado, resposta, tipo='enviada')
        registrar_estatistica(numero_normalizado, estado_atual.value, proximo_estado.value)

        return {
            "resposta": resposta,
            "estado_atual": estado_atual.name,
            "proximo_estado": proximo_estado.name
        }

    # Se o estado for NULL e a a√ß√£o for manual, enviar a mensagem inicial
    if not estado_str and acao_manual:
        visitor_name = obter_primeiro_nome(obter_nome_do_visitante(numero_normalizado)) or "Visitante"

        resposta_inicial = (f"A Paz de Cristo, {visitor_name}! Tudo bem com voc√™?\n\n"
                            "Aqui √© a Equipe de Integra√ß√£o da MAIS DE CRISTO Canasvieiras!\n\n"
                            "Escolha uma das op√ß√µes abaixo, respondendo com o n√∫mero correspondente:\n\n"
                            "1‚É£ Sou batizado em √°guas, e quero me tornar membro.\n"
                            "2‚É£ N√£o sou batizado, e quero me tornar membro.\n"
                            "3‚É£ Gostaria de receber ora√ß√µes.\n"
                            "4‚É£ Queria saber mais sobre os hor√°rios dos cultos.\n"
                            "5‚É£ Quero entrar no grupo do WhatsApp da igreja.\n"
                            "6‚É£ Outro assunto.\n\n"
                            "Nos diga qual sua escolha! üôè")

        # Atualiza o status diretamente para INICIO, sem o MENU
        atualizar_status(numero_normalizado, EstadoVisitante.INICIO.value)
        enviar_mensagem_para_fila(numero_normalizado, resposta_inicial)
        salvar_conversa(numero_normalizado, resposta_inicial, tipo='enviada', sid=message_sid)

        return {
            "resposta": resposta_inicial,
            "estado_atual": EstadoVisitante.INICIO.name,
            "proximo_estado": EstadoVisitante.INICIO.name
        }

    # Verifica se a mensagem recebida foi a mensagem inicial e n√£o a processa
    if texto_recebido_normalizado.startswith("a paz de cristo") and not acao_manual:
        logging.info(f"Mensagem inicial detectada. Ignorando processamento de resposta "
                     f"para o n√∫mero {numero_normalizado}")
        return {
            "resposta": None,
            "estado_atual": estado_atual.name,
            "proximo_estado": estado_atual.name
        }

    salvar_conversa(numero_normalizado, texto_recebido, tipo='recebida', sid=message_sid)

    # Procurar o pr√≥ximo estado baseado na resposta num√©rica ou palavra-chave
    proximo_estado = transicoes.get(estado_atual, {}).get(texto_recebido_normalizado)

    if estado_atual == EstadoVisitante.PEDIDO_ORACAO:
        visitor_name = obter_nome_do_visitante(numero_normalizado).split()[0]

        # Salvando o pedido de ora√ß√£o no banco
        salvar_conversa(numero_normalizado, f"Pedido de ora√ß√£o: {texto_recebido}", tipo='recebida', sid=message_sid)

        # Enviar o pedido de ora√ß√£o para a lista de intercessores usando o template
        enviar_pedido_oracao(
            numero_pedidos_oracao,  # Lista de n√∫meros dos intercessores
            visitor_name,  # Nome do visitante
            numero_normalizado,  # N√∫mero do visitante
            texto_recebido  # Texto do pedido
        )

        # Responder ao visitante que o pedido foi recebido e estamos orando por ele
        resposta = (
            f"Seu pedido de ora√ß√£o foi recebido, {visitor_name}. "
            f"Nossa equipe de intercess√£o j√° est√° orando por voc√™, "
            f"confiamos que Deus est√° ouvindo. "
            f"Se precisar de mais ora√ß√µes ou apoio, estamos aqui para voc√™. üôè"
        )
        proximo_estado = EstadoVisitante.FIM

        atualizar_status(numero_normalizado, EstadoVisitante.FIM.value)
        enviar_mensagem_para_fila(numero_normalizado, resposta)
        salvar_conversa(numero_normalizado, resposta, tipo='enviada')
        registrar_estatistica(numero_normalizado, estado_atual.value, proximo_estado.value)

        return {
            "resposta": resposta,
            "estado_atual": estado_atual.name,
            "proximo_estado": EstadoVisitante.FIM.name
        }

    if estado_atual == EstadoVisitante.OUTRO:
        resposta_ministerio = detectar_palavra_chave_ministerio(texto_recebido_normalizado)
        if resposta_ministerio:
            enviar_mensagem_para_fila(numero_normalizado, resposta_ministerio)
            salvar_conversa(numero_normalizado, resposta_ministerio, tipo='enviada', sid=message_sid)
            return {
                "resposta": resposta_ministerio,
                "estado_atual": "MINISTERIO",
                "proximo_estado": "INICIO"
            }

        # Verificar se a mensagem √© um agradecimento
        if detectar_agradecimento(texto_recebido_normalizado):
            resposta_agradecimento = ("Ficamos felizes em poder ajudar! "
                                      "Se precisar de algo mais, estamos √† disposi√ß√£o.")
            enviar_mensagem_para_fila(numero_normalizado, resposta_agradecimento)
            salvar_conversa(numero_normalizado, resposta_agradecimento, tipo='enviada', sid=message_sid)
            return {
                "resposta": resposta_agradecimento,
                "estado_atual": "AGRADACIMENTO",
                "proximo_estado": "INICIO"
            }

        logging.warning(
            f"Nenhuma transi√ß√£o encontrada para o estado {estado_atual.name} "
            f"com a mensagem '{texto_recebido_normalizado}'.")

        visitor_name = obter_nome_do_visitante(numero_normalizado).split()[0]
        # Salvando a mensagem de "outro" no banco de dados
        salvar_conversa(numero_normalizado, f"Outro: {texto_recebido}", tipo='recebida', sid=message_sid)

        # Enviar a mensagem para o n√∫mero da secretaria
        mensagem_outro = (
            f"Solicita√ß√£o de Atendimento (Outro):\nVisitante: {visitor_name}\nN√∫mero: {numero_normalizado}\n"
            f"Mensagem: {texto_recebido}\nData: {datetime.now().strftime('%d/%m/%Y %H:%M')}"
        )
        try:
            numero_normalizado_secretaria = normalizar_para_envio(numero_outros_secretaria)
            adicionar_na_fila(numero_normalizado_secretaria, mensagem_outro)
        except Exception as e:
            logging.error(f"Erro ao enviar a mensagem 'Outro' para o n√∫mero da secretaria: {e}")

        # Responder ao visitante
        resposta = (f"Entendido, {visitor_name}. Sua solicita√ß√£o foi encaminhada para a nossa secretaria, "
                    f"e em breve entraremos em contato com voc√™. üôÇ")
        proximo_estado = EstadoVisitante.FIM

        atualizar_status(numero_normalizado, EstadoVisitante.FIM.value)
        enviar_mensagem_para_fila(numero_normalizado, resposta)
        salvar_conversa(numero_normalizado, resposta, tipo='enviada')
        registrar_estatistica(numero_normalizado, estado_atual.value, proximo_estado.value)

        return {
            "resposta": resposta,
            "estado_atual": estado_atual.name,
            "proximo_estado": EstadoVisitante.FIM.name
        }

    logging.info(f"O Pr√≥ximo estado √©: {proximo_estado}.")

    if proximo_estado == EstadoVisitante.ATUALIZAR_CADASTRO:
        logging.info(f"Processando estado ATUALIZAR_CADASTRO para o n√∫mero {numero_normalizado}.")

        # Pergunta se o visitante deseja ver os dados cadastrais
        resposta = (
            "Voc√™ escolheu atualizar seu cadastro. üòä\n\n"
            "Antes de prosseguir, gostaria de ver os dados que temos cadastrados para voc√™?\n\n"
            "Digite **Sim** para ver seus dados ou **N√£o** para voltar ao menu inicial."
        )
        enviar_mensagem_para_fila(numero_normalizado, resposta)
        logging.info(f"Enviando mensagem: {resposta}")
        salvar_conversa(numero_normalizado, resposta, tipo='enviada')
        atualizar_status(numero_normalizado, EstadoVisitante.ATUALIZAR_CADASTRO.value)
        registrar_estatistica(numero_normalizado, EstadoVisitante.ATUALIZAR_CADASTRO,
                              EstadoVisitante.AGUARDANDO_ATUALIZACAO)
        logging.info(f"Salvando a estatistica Status atual √©: {estado_atual} e o Pr√≥ximo estado √©: {proximo_estado}.")

        return {
            "resposta": resposta,
            "estado_atual": estado_atual.name,
            "proximo_estado": proximo_estado.name
        }

    if estado_atual == EstadoVisitante.ATUALIZAR_CADASTRO:
        logging.info(f"Processando estado AGUARDANDO_CONFIRMACAO para o n√∫mero {numero_normalizado}.")
        texto_recebido_normalizado = normalizar_texto(texto_recebido)

        if texto_recebido_normalizado in ["sim", "s"]:
            # Busca os dados do visitante
            dados = obter_dados_visitante(numero_normalizado)
            logging.info(f"Dados obtidos para o telefone {numero_normalizado}: {dados}")

            if dados:
                # Obt√©m o nome do visitante
                nome_visitante = dados.get('nome', 'Visitante').split()[0]  # Pega apenas o primeiro nome

                # Constr√≥i a mensagem personalizada
                resposta = (
                    f"Ol√°, {nome_visitante}! üòä\n\n"
                    f"Aqui est√£o os dados que temos cadastrados para voc√™:\n\n"
                    f"üë§ **Nome:** {dados['nome']}\n"
                    f"üìß **Email:** {dados['email']}\n"
                    f"üéÇ **Data de Nascimento:** {dados['data_nascimento']}\n"
                    f"üèôÔ∏è **Cidade:** {dados['cidade']}\n"
                    f"‚ößÔ∏è **G√™nero:** {dados['genero']}\n"
                    f"üíç **Estado Civil:** {dados['estado_civil']}\n\n"
                    "Se algum desses dados estiver incorreto ou desatualizado, "
                    "por favor, me informe qual deles voc√™ deseja atualizar.\n\n"
                    "Voc√™ pode digitar uma das op√ß√µes abaixo:\n"
                    "- Nome\n"
                    "- Email\n"
                    "- Data de Nascimento\n"
                    "- Cidade\n"
                    "- G√™nero\n"
                    "- Estado Civil\n\n"
                    "Estamos aqui para ajudar! üòâ"
                )
                # Atualiza o estado para AGUARDANDO_ATUALIZACAO
                proximo_estado = EstadoVisitante.AGUARDANDO_ATUALIZACAO
                atualizar_status(numero_normalizado, proximo_estado.value)

            else:
                # Caso os dados n√£o sejam encontrados
                resposta = (
                    f"Ol√°! üòä\n\n"
                    "Parece que n√£o encontramos seus dados no sistema. "
                    "Deseja realizar um novo cadastro? (Sim/N√£o)"
                )
                # Retorna ao estado INICIO
                proximo_estado = 'PEDIR_NOME'
                atualizar_status(numero_normalizado, proximo_estado)

        elif texto_recebido_normalizado in ["n√£o", "nao", "n"]:
            # Retorna ao menu inicial
            resposta = "Tudo bem! Se precisar de algo mais, estou √† disposi√ß√£o. üòä"
            proximo_estado = EstadoVisitante.FIM
            atualizar_status(numero_normalizado, proximo_estado.value)

        else:
            # Resposta inv√°lida
            resposta = ("Desculpe, n√£o entendi sua resposta. Digite **Sim** para ver seus dados "
                        "ou **N√£o** para voltar ao menu inicial.")
            proximo_estado = EstadoVisitante.ATUALIZAR_CADASTRO  # Mant√©m o mesmo estado

        # Envia a mensagem e salva a conversa
        enviar_mensagem_para_fila(numero_normalizado, resposta)
        logging.info(f"Enviando mensagem: {resposta}")
        salvar_conversa(numero_normalizado, resposta, tipo='enviada')
        registrar_estatistica(numero_normalizado, estado_atual.value, proximo_estado.value)

        return {
            "resposta": resposta,
            "estado_atual": estado_atual.name,
            "proximo_estado": proximo_estado.name
        }

    # Tratamento da escolha de atualiza√ß√£o
    if estado_atual == EstadoVisitante.AGUARDANDO_ATUALIZACAO:
        campo_atualizar = texto_recebido_normalizado.lower()

        if campo_atualizar == "nome":
            mensagem_resposta = "Por favor, informe seu novo nome."
            proximo_estado = EstadoVisitante.ATUALIZAR_NOME
            atualizar_status(numero_normalizado, proximo_estado.value)
        elif campo_atualizar == "email":
            mensagem_resposta = "Por favor, informe seu novo email."
            proximo_estado = EstadoVisitante.ATUALIZAR_EMAIL
            atualizar_status(numero_normalizado, proximo_estado.value)
        elif campo_atualizar == "data de nascimento":
            mensagem_resposta = "Por favor, informe sua nova data de nascimento (no formato DD/MM/AAAA)."
            proximo_estado = EstadoVisitante.ATUALIZAR_DATA_NASCIMENTO
            atualizar_status(numero_normalizado, proximo_estado.value)
        elif campo_atualizar == "cidade":
            mensagem_resposta = "Por favor, informe sua nova cidade."
            proximo_estado = EstadoVisitante.ATUALIZAR_CIDADE
            atualizar_status(numero_normalizado, proximo_estado.value)
        elif campo_atualizar == "g√™nero":
            mensagem_resposta = ("Por favor, escolha uma das op√ß√µes abaixo para atualizar seu g√™nero:"
                                 "\n1Ô∏è‚É£ Masculino\n2Ô∏è‚É£ Feminino\n3Ô∏è‚É£ Outro")
            proximo_estado = EstadoVisitante.ATUALIZAR_GENERO
            atualizar_status(numero_normalizado, proximo_estado.value)
        elif campo_atualizar == "estado civil":
            mensagem_resposta = ("Por favor, escolha uma das op√ß√µes abaixo para atualizar seu estado civil:"
                                 "\n1Ô∏è‚É£ Casado\n2Ô∏è‚É£ Solteiro\n3Ô∏è‚É£ Divorciado\n4Ô∏è‚É£ Vi√∫vo")
            proximo_estado = EstadoVisitante.ATUALIZAR_ESTADO_CIVIL
            atualizar_status(numero_normalizado, proximo_estado.value)
        else:
            mensagem_resposta = ("Desculpe, n√£o reconhe√ßo essa op√ß√£o. "
                                 "Voc√™ pode atualizar: nome, email, data de nascimento, "
                                 "cidade, g√™nero ou estado civil.")

        enviar_mensagem_para_fila(numero_normalizado, mensagem_resposta)
        salvar_conversa(numero_normalizado, mensagem_resposta, tipo='enviada')
    elif estado_atual == EstadoVisitante.ATUALIZAR_NOME:
        if texto_recebido_normalizado:
            atualizar_dado_visitante(numero_normalizado, "nome", texto_recebido_normalizado)
            mensagem_resposta = f"Seu nome foi atualizado para: {texto_recebido_normalizado}."
            atualizar_status(numero_normalizado, EstadoVisitante.ATUALIZAR_CADASTRO)
        else:
            mensagem_resposta = "Nome inv√°lido. Por favor, informe seu novo nome."

        enviar_mensagem_para_fila(numero_normalizado, mensagem_resposta)
        salvar_conversa(numero_normalizado, mensagem_resposta, tipo='enviada')

    elif estado_atual == EstadoVisitante.ATUALIZAR_EMAIL:
        if texto_recebido_normalizado:
            atualizar_dado_visitante(numero_normalizado, "email", texto_recebido_normalizado)
            mensagem_resposta = f"Seu email foi atualizado para: {texto_recebido_normalizado}."
            atualizar_status(numero_normalizado, EstadoVisitante.ATUALIZAR_CADASTRO)
        else:
            mensagem_resposta = "Email inv√°lido. Por favor, informe seu novo email."

        enviar_mensagem_para_fila(numero_normalizado, mensagem_resposta)
        salvar_conversa(numero_normalizado, mensagem_resposta, tipo='enviada')

    elif estado_atual == EstadoVisitante.ATUALIZAR_DATA_NASCIMENTO:
        if validar_data_nascimento(texto_recebido_normalizado):  # Fun√ß√£o para validar a data
            atualizar_dado_visitante(numero_normalizado, "data_nascimento", texto_recebido_normalizado)
            mensagem_resposta = f"Sua data de nascimento foi atualizada para: {texto_recebido_normalizado}."
            atualizar_status(numero_normalizado, EstadoVisitante.ATUALIZAR_CADASTRO)
        else:
            mensagem_resposta = "Data de nascimento inv√°lida. Por favor, informe no formato DD/MM/AAAA."

        enviar_mensagem_para_fila(numero_normalizado, mensagem_resposta)
        salvar_conversa(numero_normalizado, mensagem_resposta, tipo='enviada')

    elif estado_atual == EstadoVisitante.ATUALIZAR_CIDADE:
        if texto_recebido_normalizado:
            atualizar_dado_visitante(numero_normalizado, "cidade", texto_recebido_normalizado)
            mensagem_resposta = f"Sua cidade foi atualizada para: {texto_recebido_normalizado}."
            atualizar_status(numero_normalizado, EstadoVisitante.ATUALIZAR_CADASTRO)
        else:
            mensagem_resposta = "Cidade inv√°lida. Por favor, informe sua nova cidade."

        enviar_mensagem_para_fila(numero_normalizado, mensagem_resposta)
        salvar_conversa(numero_normalizado, mensagem_resposta, tipo='enviada')

    elif estado_atual == EstadoVisitante.ATUALIZAR_GENERO:
        opcoes_genero = {"1": "Masculino", "2": "Feminino", "3": "Outro"}
        genero_escolhido = opcoes_genero.get(texto_recebido_normalizado)

        if genero_escolhido:
            atualizar_dado_visitante(numero_normalizado, "genero", genero_escolhido)
            mensagem_resposta = (f"Seu g√™nero foi atualizado para: {genero_escolhido}. "
                                 f"Se precisar alterar mais algo, digite a op√ß√£o desejada.")
            atualizar_status(numero_normalizado, EstadoVisitante.ATUALIZAR_CADASTRO)
        else:
            mensagem_resposta = "Op√ß√£o inv√°lida. Escolha uma op√ß√£o v√°lida: 1Ô∏è‚É£ Masculino, 2Ô∏è‚É£ Feminino, 3Ô∏è‚É£ Outro"

        enviar_mensagem_para_fila(numero_normalizado, mensagem_resposta)
        salvar_conversa(numero_normalizado, mensagem_resposta, tipo='enviada')

    elif estado_atual == EstadoVisitante.ATUALIZAR_ESTADO_CIVIL:
        opcoes_estado_civil = {"1": "Casado", "2": "Solteiro", "3": "Divorciado", "4": "Vi√∫vo"}
        estado_civil_escolhido = opcoes_estado_civil.get(texto_recebido_normalizado)

        if estado_civil_escolhido:
            atualizar_dado_visitante(numero_normalizado, "estado_civil", estado_civil_escolhido)
            mensagem_resposta = (f"Seu estado civil foi atualizado para: {estado_civil_escolhido}."
                                 f" Se precisar alterar mais algo, digite a op√ß√£o desejada.")
            atualizar_status(numero_normalizado, EstadoVisitante.ATUALIZAR_CADASTRO)
        else:
            mensagem_resposta = ("Op√ß√£o inv√°lida. Escolha uma op√ß√£o v√°lida: "
                                 "1Ô∏è‚É£ Casado, 2Ô∏è‚É£ Solteiro, 3Ô∏è‚É£ Divorciado, 4Ô∏è‚É£ Vi√∫vo")

        enviar_mensagem_para_fila(numero_normalizado, mensagem_resposta)
        salvar_conversa(numero_normalizado, mensagem_resposta, tipo='enviada')

    if estado_atual == EstadoVisitante.FINALIZAR_ATUALIZACAO:
        if texto_recebido_normalizado == "finalizar":
            mensagem_resposta = ("Obrigado por atualizar seus dados! "
                                 "Se precisar de mais alguma coisa, estamos aqui para ajudar. üôå")
            atualizar_status(numero_normalizado, EstadoVisitante.INICIO)
        else:
            mensagem_resposta = ("Se deseja atualizar mais alguma informa√ß√£o, informe qual. "
                                 "Caso tenha finalizado, digite 'finalizar'.")

        enviar_mensagem_para_fila(numero_normalizado, mensagem_resposta)
        salvar_conversa(numero_normalizado, mensagem_resposta, tipo='enviada')

    # Tratamento para quando nenhuma transi√ß√£o √© encontrada
    if proximo_estado is None:
        # --- NOVO: Consulta a IA antes de qualquer outra coisa ---
        resposta_ia, confianca_ia = ia_integracao.responder_pergunta(texto_recebido)
        if resposta_ia and confianca_ia > 0.3:  # Limiar de confian√ßa configur√°vel
            logger.info(f"IA respondeu com confian√ßa {confianca_ia:.2f}")
            enviar_mensagem_para_fila(numero_normalizado, resposta_ia)
            salvar_conversa(numero_normalizado, resposta_ia, tipo='enviada', sid=message_sid)
            # Atualiza o estado para INICIO para manter o fluxo
            atualizar_status(numero_normalizado, EstadoVisitante.INICIO.value)
            return {
                "resposta": resposta_ia,
                "estado_atual": estado_atual.name,
                "proximo_estado": EstadoVisitante.INICIO.name
            }
        # --- FIM DA NOVA SE√á√ÉO ---
    
        # Se a IA n√£o respondeu, continua com a l√≥gica existente
        # Verifica se a mensagem cont√©m uma palavra-chave de minist√©rio
        resposta_ministerio = detectar_palavra_chave_ministerio(texto_recebido_normalizado)
        if resposta_ministerio:
            enviar_mensagem_para_fila(numero_normalizado, resposta_ministerio)
            salvar_conversa(numero_normalizado, resposta_ministerio, tipo='enviada', sid=message_sid)
            return {
                "resposta": resposta_ministerio,
                "estado_atual": "MINISTERIO",
                "proximo_estado": "INICIO"
            }

        # Verificar se a mensagem √© uma sauda√ß√£o
        if detectar_saudacao(texto_recebido_normalizado):
            resposta_saudacao = "Oi! Que bom te ver por aqui üòä. Como posso ajudar voc√™ hoje?"
            enviar_mensagem_para_fila(numero_normalizado, resposta_saudacao)
            salvar_conversa(numero_normalizado, resposta_saudacao, tipo='enviada', sid=message_sid)
            return {
                "resposta": resposta_saudacao,
                "estado_atual": "SAUDACAO",
                "proximo_estado": estado_str or "INICIO"
            }

        # Verificar se a mensagem √© um agradecimento
        if detectar_agradecimento(texto_recebido_normalizado):
            resposta_agradecimento = ("Ficamos felizes em poder ajudar! "
                                      "Se precisar de algo mais, estamos √† disposi√ß√£o.")
            enviar_mensagem_para_fila(numero_normalizado, resposta_agradecimento)
            salvar_conversa(numero_normalizado, resposta_agradecimento, tipo='enviada', sid=message_sid)
            return {
                "resposta": resposta_agradecimento,
                "estado_atual": "AGRADACIMENTO",
                "proximo_estado": "INICIO"
            }

        logging.warning(
            f"Nenhuma transi√ß√£o encontrada para o estado {estado_atual.name} "
            f"com a mensagem '{texto_recebido_normalizado}'.")

        visitor_name = obter_nome_do_visitante(numero_normalizado).split()[0]
        # Mensagem de erro cordial com o menu inicial
        resposta = (f"Desculpe, {visitor_name}, n√£o entendi sua resposta. Por favor, tente novamente.\n\n"
                    "Aqui est√£o algumas op√ß√µes que voc√™ pode escolher:\n\n"
                    "1‚É£ Sou batizado em √°guas, e quero me tornar membro.\n"
                    "2‚É£ N√£o sou batizado, e quero me tornar membro.\n"
                    "3‚É£ Gostaria de receber ora√ß√µes.\n"
                    "4‚É£ Queria saber mais sobre os hor√°rios dos cultos.\n"
                    "5‚É£ Quero entrar no grupo do WhatsApp da igreja.\n"
                    "6‚É£ Outro assunto.\n")
        proximo_estado = estado_atual

    else:
        visitor_name = obter_nome_do_visitante(numero_normalizado).split()[0]
        resposta = mensagens.get(proximo_estado, f"Desculpe, {visitor_name}, n√£o entendi sua resposta.")

    # Atualizar o status se houver mudan√ßa de estado
    if proximo_estado != estado_atual:
        atualizar_status(numero_normalizado, proximo_estado.value)
        logging.info(f"Estado atualizado para {proximo_estado.name} no banco de dados para o "
                     f"n√∫mero {numero_normalizado}")
    else:
        logging.info(f"Estado mantido como {estado_atual.name} para o n√∫mero {numero_normalizado}")

    # Enviar mensagem de resposta e registrar estat√≠sticas
    try:
        enviar_mensagem_para_fila(numero, resposta)
        salvar_conversa(numero_normalizado, resposta, tipo='enviada')
        registrar_estatistica(numero_normalizado, estado_atual.value, proximo_estado.value)
    except Exception as e:
        logging.error(f"Erro ao enviar ou salvar mensagem para {numero_normalizado}: {e}")

    return {
        "resposta": resposta,
        "estado_atual": estado_atual.name,
        "proximo_estado": proximo_estado.name
    }


def normalizar_texto(texto):
    texto = texto.strip().lower()
    texto = ''.join(
        c for c in unicodedata.normalize('NFD', texto)
        if unicodedata.category(c) != 'Mn'
    )
    return texto


def validar_data_nascimento(data: str) -> bool:
    """
    Valida se a data de nascimento est√° no formato DD/MM/AAAA.
    """
    padrao = r"^\d{2}/\d{2}/\d{4}$"
    return re.match(padrao, data) is not None


def enviar_mensagem(numero_destino, corpo_mensagem):
    try:
        numero_normalizado = normalizar_para_envio(numero_destino)
        logging.info(f"Enviando mensagem para o n√∫mero normalizado: whatsapp:+{numero_normalizado}")

        mensagem = client.messages.create(
            body=corpo_mensagem,
            from_=f"whatsapp:{twilio_phone_number}",
            to=f"whatsapp:+{numero_normalizado}"
        )
        logging.info(f"Mensagem enviada: {mensagem.sid}")
    except Exception as e:
        logging.error(f"Erro ao enviar mensagem para {numero_destino}: {e}")


def enviar_mensagem_manual(numero_destino, template_sid, params):  # Altere o segundo par√¢metro para template_sid
    try:
        numero_normalizado = normalizar_para_envio(numero_destino)
        logging.info(f"Enviando mensagem para o n√∫mero normalizado: whatsapp:+{numero_normalizado}")

        if 'visitor_name' not in params:
            logging.error("A vari√°vel 'visitor_name' n√£o foi encontrada em params.")
            return

        logging.info(f"Conte√∫do das vari√°veis: {params}")

        url = f"https://api.twilio.com/2010-04-01/Accounts/{os.environ['TWILIO_ACCOUNT_SID']}/Messages.json"

        data = {
            "To": f"whatsapp:+{numero_normalizado}",
            "From": f"whatsapp:{twilio_phone_number}",
            "ContentSid": template_sid,  # Mude TemplateSid para ContentSid
            "ContentVariables": json.dumps(params)
        }

        response = requests.post(
            url,
            data=data,
            auth=(os.environ["TWILIO_ACCOUNT_SID"], os.environ["TWILIO_AUTH_TOKEN"])
        )

        if response.status_code != 201:
            logging.error(f"Erro no envio: {response.status_code} - {response.text}")

        if response.status_code == 201:
            logging.info("Mensagem enviada com sucesso!")

    except Exception as e:
        logging.error(f"Erro ao enviar mensagem para {numero_destino}: {e}")

